// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaturalPersonsHandbook.DAL.DbContextModel;

namespace NaturalPersonsHandbook.DAL.Migrations
{
    [DbContext(typeof(NaturalPersonDbContext))]
    partial class NaturalPersonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-preview.8.20407.4");

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 402, DateTimeKind.Local).AddTicks(2502),
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 404, DateTimeKind.Local).AddTicks(9750),
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 404, DateTimeKind.Local).AddTicks(9857),
                            Name = "Batumi"
                        });
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 408, DateTimeKind.Local).AddTicks(5946),
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 408, DateTimeKind.Local).AddTicks(6031),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.NaturalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.ToTable("NaturalPersons");
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.NaturalPersonsRelationship", b =>
                {
                    b.Property<int>("NaturalPersonId")
                        .HasColumnType("int");

                    b.Property<int>("TargetNaturalPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RelationshipTypeId")
                        .HasColumnType("int");

                    b.HasKey("NaturalPersonId", "TargetNaturalPersonId");

                    b.HasIndex("RelationshipTypeId");

                    b.HasIndex("TargetNaturalPersonId");

                    b.ToTable("NaturalPersonsRelationships");
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NaturalPersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NaturalPersonId");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 409, DateTimeKind.Local).AddTicks(1278),
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 409, DateTimeKind.Local).AddTicks(1377),
                            Name = "Office"
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 409, DateTimeKind.Local).AddTicks(1385),
                            Name = "Home"
                        });
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.RelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RelationshipTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 409, DateTimeKind.Local).AddTicks(6410),
                            Name = "Colleague"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 409, DateTimeKind.Local).AddTicks(6487),
                            Name = "Familiar"
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 409, DateTimeKind.Local).AddTicks(6495),
                            Name = "Relative"
                        },
                        new
                        {
                            Id = 4,
                            Code = 4,
                            CreateDate = new DateTime(2020, 8, 31, 0, 22, 5, 409, DateTimeKind.Local).AddTicks(6499),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.NaturalPerson", b =>
                {
                    b.HasOne("NaturalPersonsHandbook.DAL.Entities.City", "City")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaturalPersonsHandbook.DAL.Entities.Gender", "Gender")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.NaturalPersonsRelationship", b =>
                {
                    b.HasOne("NaturalPersonsHandbook.DAL.Entities.NaturalPerson", "NaturalPerson")
                        .WithMany("NaturalPersonsRelationships")
                        .HasForeignKey("NaturalPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NaturalPersonsHandbook.DAL.Entities.RelationshipType", "RelationshipType")
                        .WithMany("NaturalPersonsRelationships")
                        .HasForeignKey("RelationshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaturalPersonsHandbook.DAL.Entities.NaturalPerson", "TargerNaturalPerson")
                        .WithMany("TargetNaturalPersons")
                        .HasForeignKey("TargetNaturalPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NaturalPersonsHandbook.DAL.Entities.Phone", b =>
                {
                    b.HasOne("NaturalPersonsHandbook.DAL.Entities.NaturalPerson", "NaturalPerson")
                        .WithMany("Phones")
                        .HasForeignKey("NaturalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaturalPersonsHandbook.DAL.Entities.PhoneType", "PhoneType")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
